import tkinter as tk
import ttkbootstrap as ttk
from tkinter import messagebox, filedialog
from typing import Dict, Any, Optional, List
from decimal import Decimal
from datetime import datetime, date, timedelta
import csv
import calendar

from ...models.expense import Expense
from ...services.expense_service import ExpenseService
from ..components import DataTable, MetricsCard


class ExpensesAnalyticsView(ttk.Frame):
    """Vista de an√°lisis avanzado de gastos con est√©tica Material Design."""
    
    def __init__(self, master: Any):
        super().__init__(master)
        self.expense_service = ExpenseService()
        self.current_expenses: List[Expense] = []
        self.analysis_period = "√öltimo a√±o"
        
        self._setup_ui()
        self._load_data()

    def _setup_ui(self):
        """Configura la interfaz de an√°lisis de gastos."""
        self.configure(padding="12")

        # HEADER CON T√çTULO Y NAVEGACI√ìN
        header_frame = ttk.Frame(self)
        header_frame.pack(fill=tk.X, pady=(0, 12))
        
        # T√≠tulo
        title_frame = ttk.Frame(header_frame)
        title_frame.pack(side=tk.LEFT)
        
        main_title = ttk.Label(
            title_frame,
            text="üìä An√°lisis de Gastos",
            font=("Segoe UI", 18, "bold"),
            bootstyle="primary"
        )
        main_title.pack()
        
        subtitle = ttk.Label(
            title_frame,
            text="An√°lisis detallado por categor√≠as y tendencias",
            font=("Segoe UI", 10),
            bootstyle="secondary"
        )
        subtitle.pack()
        
        # Botones de navegaci√≥n
        nav_frame = ttk.Frame(header_frame)
        nav_frame.pack(side=tk.RIGHT)
        
        back_btn = ttk.Button(
            nav_frame,
            text="‚Üê Dashboard Gastos",
            command=self._go_back_to_expenses_dashboard,
            bootstyle="outline-secondary"
        )
        back_btn.pack(side=tk.RIGHT, padx=(5, 0))

        # RESUMEN ANAL√çTICO (4 cards horizontales)
        metrics_section = ttk.LabelFrame(self, text="üìà Resumen Anal√≠tico", padding="10")
        metrics_section.pack(fill=tk.X, pady=(0, 12))

        all_metrics = ttk.Frame(metrics_section)
        all_metrics.pack(fill=tk.X)

        # M√©tricas anal√≠ticas
        self.total_analyzed = MetricsCard(
            all_metrics,
            title="Total Analizado",
            value="$0.00",
            subtitle="Per√≠odo seleccionado",
            icon="üìä",
            color="primary"
        )
        self.total_analyzed.pack(side=tk.LEFT, expand=True, padx=2)

        self.category_count = MetricsCard(
            all_metrics,
            title="Categor√≠as Activas",
            value="0",
            subtitle="Con gastos registrados",
            icon="üìã",
            color="info"
        )
        self.category_count.pack(side=tk.LEFT, expand=True, padx=2)

        self.monthly_average = MetricsCard(
            all_metrics,
            title="Promedio Mensual",
            value="$0.00",
            subtitle="Gasto promedio/mes",
            icon="üìÖ",
            color="warning"
        )
        self.monthly_average.pack(side=tk.LEFT, expand=True, padx=2)

        self.trend_indicator = MetricsCard(
            all_metrics,
            title="Tendencia",
            value="Estable",
            subtitle="Comparativa temporal",
            icon="üìà",
            color="success"
        )
        self.trend_indicator.pack(side=tk.LEFT, expand=True, padx=2)

        # FILTROS DE AN√ÅLISIS
        filters_frame = ttk.LabelFrame(self, text="üîß Configuraci√≥n de An√°lisis", padding="12")
        filters_frame.pack(fill=tk.X, pady=(0, 12))

        # Primera fila: per√≠odo y tipo de an√°lisis
        filter_row1 = ttk.Frame(filters_frame)
        filter_row1.pack(fill=tk.X, pady=(0, 8))

        ttk.Label(filter_row1, text="Per√≠odo:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.period_filter = tk.StringVar(value="√öltimo a√±o")
        period_combo = ttk.Combobox(
            filter_row1,
            textvariable=self.period_filter,
            values=[
                "√öltimo mes",
                "√öltimos 3 meses", 
                "√öltimos 6 meses",
                "√öltimo a√±o",
                "√öltimos 2 a√±os",
                "Todo el historial"
            ],
            state="readonly",
            width=15
        )
        period_combo.pack(side=tk.LEFT, padx=(0, 15))
        period_combo.bind("<<ComboboxSelected>>", self._on_period_change)

        ttk.Label(filter_row1, text="An√°lisis por:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.analysis_type = tk.StringVar(value="Categor√≠as")
        analysis_combo = ttk.Combobox(
            filter_row1,
            textvariable=self.analysis_type,
            values=["Categor√≠as", "Proveedores", "Meses", "Gastos Recurrentes"],
            state="readonly",
            width=15
        )
        analysis_combo.pack(side=tk.LEFT, padx=(0, 15))
        analysis_combo.bind("<<ComboboxSelected>>", self._on_analysis_change)

        # Bot√≥n de an√°lisis
        analyze_btn = ttk.Button(
            filter_row1,
            text="üìä Analizar",
            command=self._perform_analysis,
            bootstyle="primary"
        )
        analyze_btn.pack(side=tk.LEFT)

        # HERRAMIENTAS DE AN√ÅLISIS
        tools_frame = ttk.Frame(filters_frame)
        tools_frame.pack(fill=tk.X)

        # Botones de herramientas
        compare_btn = ttk.Button(
            tools_frame,
            text="üìà Comparar Per√≠odos",
            command=self._compare_periods,
            bootstyle="info"
        )
        compare_btn.pack(side=tk.LEFT, padx=(0, 8))

        forecast_btn = ttk.Button(
            tools_frame,
            text="üîÆ Proyecci√≥n",
            command=self._forecast_expenses,
            bootstyle="success"
        )
        forecast_btn.pack(side=tk.LEFT, padx=(0, 8))

        budget_btn = ttk.Button(
            tools_frame,
            text="üí∞ An√°lisis de Presupuesto",
            command=self._budget_analysis,
            bootstyle="warning"
        )
        budget_btn.pack(side=tk.LEFT, padx=(0, 8))

        export_analysis_btn = ttk.Button(
            tools_frame,
            text="üì§ Exportar An√°lisis",
            command=self._export_analysis,
            bootstyle="outline-primary"
        )
        export_analysis_btn.pack(side=tk.RIGHT)

        # RESULTADOS DEL AN√ÅLISIS
        results_frame = ttk.LabelFrame(self, text="üìã Resultados del An√°lisis", padding="8")
        results_frame.pack(fill=tk.BOTH, expand=True)

        # Informaci√≥n del an√°lisis actual
        self.analysis_info = ttk.Label(
            results_frame, 
            text=f"An√°lisis por {self.analysis_type.get()} - {self.period_filter.get()}"
        )
        self.analysis_info.pack(anchor=tk.W, pady=(0, 5))

        # Tabla de an√°lisis
        self.analysis_table = DataTable(
            results_frame,
            columns=[
                ("category", "Categor√≠a/Item"),
                ("total_amount", "Monto Total"),
                ("percentage", "% del Total"),
                ("count", "Cantidad"),
                ("average", "Promedio"),
                ("trend", "Tendencia")
            ],
            on_select=self._on_select_analysis_item,
            on_double_click=lambda data: self._show_detailed_analysis(data)
        )
        self.analysis_table.pack(fill=tk.BOTH, expand=True)

        # PANEL DE DETALLES DEL AN√ÅLISIS
        details_frame = ttk.LabelFrame(self, text="‚ÑπÔ∏è Detalles del An√°lisis", padding="12")
        details_frame.pack(fill=tk.X, pady=(12, 0))

        self.details_text = tk.Text(
            details_frame,
            height=5,
            wrap=tk.WORD,
            font=("Segoe UI", 9),
            state=tk.DISABLED
        )
        self.details_text.pack(fill=tk.X)

    def _load_data(self):
        """Carga todos los gastos para an√°lisis."""
        try:
            self.current_expenses = self.expense_service.get_all()
            self._perform_analysis()
        except Exception as e:
            messagebox.showerror("Error", f"Error al cargar datos para an√°lisis: {e}")

    def _on_period_change(self, event=None):
        """Maneja cambios en el per√≠odo de an√°lisis."""
        self._perform_analysis()

    def _on_analysis_change(self, event=None):
        """Maneja cambios en el tipo de an√°lisis."""
        self._perform_analysis()

    def _perform_analysis(self):
        """Realiza el an√°lisis seg√∫n los criterios seleccionados."""
        try:
            period = self.period_filter.get()
            analysis_type = self.analysis_type.get()
            
            # Filtrar gastos por per√≠odo
            filtered_expenses = self._filter_by_period(period)
            
            # Realizar an√°lisis seg√∫n el tipo
            if analysis_type == "Categor√≠as":
                analysis_data = self._analyze_by_categories(filtered_expenses)
            elif analysis_type == "Proveedores":
                analysis_data = self._analyze_by_providers(filtered_expenses)
            elif analysis_type == "Meses":
                analysis_data = self._analyze_by_months(filtered_expenses)
            elif analysis_type == "Gastos Recurrentes":
                analysis_data = self._analyze_recurring_expenses(filtered_expenses)
            else:
                analysis_data = []

            # Actualizar tabla y m√©tricas
            self._update_analysis_table(analysis_data)
            self._update_analysis_metrics(filtered_expenses, analysis_data)
            
            # Actualizar informaci√≥n del an√°lisis
            self.analysis_info.configure(
                text=f"An√°lisis por {analysis_type} - {period} ({len(filtered_expenses)} gastos)"
            )
            
        except Exception as e:
            print(f"Error en an√°lisis: {e}")
            messagebox.showerror("Error", f"Error al realizar an√°lisis: {e}")

    def _filter_by_period(self, period):
        """Filtra gastos por el per√≠odo seleccionado."""
        today = date.today()
        
        if period == "√öltimo mes":
            start_date = today.replace(day=1)
        elif period == "√öltimos 3 meses":
            start_date = today - timedelta(days=90)
        elif period == "√öltimos 6 meses":
            start_date = today - timedelta(days=180)
        elif period == "√öltimo a√±o":
            start_date = today - timedelta(days=365)
        elif period == "√öltimos 2 a√±os":
            start_date = today - timedelta(days=730)
        else:  # Todo el historial
            return self.current_expenses
        
        return [e for e in self.current_expenses if e.date >= start_date]

    def _analyze_by_categories(self, expenses):
        """Analiza gastos por categor√≠as."""
        category_data = {}
        total_amount = sum(e.amount for e in expenses)
        
        for expense in expenses:
            category = expense.category
            if category not in category_data:
                category_data[category] = {
                    'total': Decimal('0'),
                    'count': 0,
                    'expenses': []
                }
            
            category_data[category]['total'] += expense.amount
            category_data[category]['count'] += 1
            category_data[category]['expenses'].append(expense)
        
        # Convertir a lista ordenada
        analysis_data = []
        for category, data in sorted(category_data.items(), key=lambda x: x[1]['total'], reverse=True):
            percentage = (data['total'] / total_amount * 100) if total_amount > 0 else 0
            average = data['total'] / data['count'] if data['count'] > 0 else Decimal('0')
            
            analysis_data.append({
                'category': category,
                'total_amount': f"${data['total']:,.2f}",
                'percentage': f"{percentage:.1f}%",
                'count': str(data['count']),
                'average': f"${average:,.2f}",
                'trend': self._calculate_trend(data['expenses'])
            })
        
        return analysis_data

    def _analyze_by_providers(self, expenses):
        """Analiza gastos por proveedores."""
        provider_data = {}
        total_amount = sum(e.amount for e in expenses)
        
        for expense in expenses:
            provider = expense.provider or "Sin proveedor"
            if provider not in provider_data:
                provider_data[provider] = {
                    'total': Decimal('0'),
                    'count': 0,
                    'expenses': []
                }
            
            provider_data[provider]['total'] += expense.amount
            provider_data[provider]['count'] += 1
            provider_data[provider]['expenses'].append(expense)
        
        # Convertir a lista ordenada
        analysis_data = []
        for provider, data in sorted(provider_data.items(), key=lambda x: x[1]['total'], reverse=True):
            percentage = (data['total'] / total_amount * 100) if total_amount > 0 else 0
            average = data['total'] / data['count'] if data['count'] > 0 else Decimal('0')
            
            analysis_data.append({
                'category': provider,
                'total_amount': f"${data['total']:,.2f}",
                'percentage': f"{percentage:.1f}%",
                'count': str(data['count']),
                'average': f"${average:,.2f}",
                'trend': self._calculate_trend(data['expenses'])
            })
        
        return analysis_data

    def _analyze_by_months(self, expenses):
        """Analiza gastos por meses."""
        month_data = {}
        
        for expense in expenses:
            month_key = expense.date.strftime("%Y-%m")
            month_name = expense.date.strftime("%B %Y")
            
            if month_key not in month_data:
                month_data[month_key] = {
                    'name': month_name,
                    'total': Decimal('0'),
                    'count': 0,
                    'expenses': []
                }
            
            month_data[month_key]['total'] += expense.amount
            month_data[month_key]['count'] += 1
            month_data[month_key]['expenses'].append(expense)
        
        # Convertir a lista ordenada por fecha
        analysis_data = []
        total_amount = sum(data['total'] for data in month_data.values())
        
        for month_key, data in sorted(month_data.items(), reverse=True):
            percentage = (data['total'] / total_amount * 100) if total_amount > 0 else 0
            average = data['total'] / data['count'] if data['count'] > 0 else Decimal('0')
            
            analysis_data.append({
                'category': data['name'],
                'total_amount': f"${data['total']:,.2f}",
                'percentage': f"{percentage:.1f}%",
                'count': str(data['count']),
                'average': f"${average:,.2f}",
                'trend': "üìä Mensual"
            })
        
        return analysis_data

    def _analyze_recurring_expenses(self, expenses):
        """Analiza gastos recurrentes."""
        recurring_expenses = [e for e in expenses if getattr(e, 'is_recurring', False)]
        
        # Agrupar por descripci√≥n similar
        recurring_data = {}
        for expense in recurring_expenses:
            key = expense.description
            if key not in recurring_data:
                recurring_data[key] = {
                    'total': Decimal('0'),
                    'count': 0,
                    'expenses': []
                }
            
            recurring_data[key]['total'] += expense.amount
            recurring_data[key]['count'] += 1
            recurring_data[key]['expenses'].append(expense)
        
        # Convertir a lista
        analysis_data = []
        total_amount = sum(data['total'] for data in recurring_data.values())
        
        for description, data in sorted(recurring_data.items(), key=lambda x: x[1]['total'], reverse=True):
            percentage = (data['total'] / total_amount * 100) if total_amount > 0 else 0
            average = data['total'] / data['count'] if data['count'] > 0 else Decimal('0')
            
            analysis_data.append({
                'category': description,
                'total_amount': f"${data['total']:,.2f}",
                'percentage': f"{percentage:.1f}%",
                'count': str(data['count']),
                'average': f"${average:,.2f}",
                'trend': "üîÑ Recurrente"
            })
        
        return analysis_data

    def _calculate_trend(self, expenses):
        """Calcula la tendencia de una serie de gastos."""
        if len(expenses) < 2:
            return "üìä Nuevo"
        
        # Ordenar por fecha
        sorted_expenses = sorted(expenses, key=lambda x: x.date)
        
        # Comparar primera y segunda mitad
        mid_point = len(sorted_expenses) // 2
        first_half = sorted_expenses[:mid_point]
        second_half = sorted_expenses[mid_point:]
        
        first_avg = sum(e.amount for e in first_half) / len(first_half)
        second_avg = sum(e.amount for e in second_half) / len(second_half)
        
        if second_avg > first_avg * 1.1:
            return "üìà Creciente"
        elif second_avg < first_avg * 0.9:
            return "üìâ Decreciente"
        else:
            return "üìä Estable"

    def _update_analysis_table(self, analysis_data):
        """Actualiza la tabla de an√°lisis."""
        self.analysis_table.set_data(analysis_data)

    def _update_analysis_metrics(self, expenses, analysis_data):
        """Actualiza las m√©tricas del an√°lisis."""
        if not expenses:
            self.total_analyzed.update_value("$0.00")
            self.category_count.update_value("0")
            self.monthly_average.update_value("$0.00")
            self.trend_indicator.update_value("Sin datos")
            return
        
        total_amount = sum(e.amount for e in expenses)
        category_count = len(analysis_data)
        
        # Calcular promedio mensual
        if len(expenses) > 0:
            first_date = min(e.date for e in expenses)
            last_date = max(e.date for e in expenses)
            months_diff = max(1, (last_date.year - first_date.year) * 12 + last_date.month - first_date.month + 1)
            monthly_avg = total_amount / months_diff
        else:
            monthly_avg = Decimal('0')
        
        # Actualizar m√©tricas
        self.total_analyzed.update_value(f"${total_amount:,.2f}")
        self.category_count.update_value(str(category_count))
        self.monthly_average.update_value(f"${monthly_avg:,.2f}")
        
        # Calcular tendencia general
        overall_trend = self._calculate_trend(expenses)
        self.trend_indicator.update_value(overall_trend)

    def _on_select_analysis_item(self, data: Dict[str, Any]):
        """Maneja la selecci√≥n de un item de an√°lisis."""
        if data:
            details = f"An√°lisis seleccionado: {data.get('category', 'N/A')}\n"
            details += f"Monto total: {data.get('total_amount', 'N/A')}\n"
            details += f"Porcentaje del total: {data.get('percentage', 'N/A')}\n"
            details += f"Cantidad de gastos: {data.get('count', 'N/A')}\n"
            details += f"Promedio por gasto: {data.get('average', 'N/A')}\n"
            details += f"Tendencia: {data.get('trend', 'N/A')}"
            
            self._update_details_panel(details)

    def _update_details_panel(self, details):
        """Actualiza el panel de detalles."""
        self.details_text.configure(state=tk.NORMAL)
        self.details_text.delete(1.0, tk.END)
        self.details_text.insert(1.0, details)
        self.details_text.configure(state=tk.DISABLED)

    def _show_detailed_analysis(self, data: Dict[str, Any]):
        """Muestra an√°lisis detallado del item seleccionado."""
        category = data.get('category', 'Item')
        
        # Crear ventana de an√°lisis detallado
        detail_window = tk.Toplevel(self)
        detail_window.title(f"An√°lisis Detallado - {category}")
        detail_window.geometry("600x400")
        detail_window.transient(self)
        
        # Contenido del an√°lisis detallado
        text_widget = tk.Text(detail_window, wrap=tk.WORD, padx=10, pady=10)
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        details = f"AN√ÅLISIS DETALLADO - {category.upper()}\n"
        details += "="*50 + "\n\n"
        details += f"Total gastado: {data.get('total_amount', 'N/A')}\n"
        details += f"Porcentaje del total: {data.get('percentage', 'N/A')}\n"
        details += f"N√∫mero de gastos: {data.get('count', 'N/A')}\n"
        details += f"Promedio por gasto: {data.get('average', 'N/A')}\n"
        details += f"Tendencia observada: {data.get('trend', 'N/A')}\n\n"
        details += "RECOMENDACIONES:\n"
        details += "- Revise los gastos m√°s altos de esta categor√≠a\n"
        details += "- Compare con per√≠odos anteriores\n"
        details += "- Eval√∫e oportunidades de optimizaci√≥n\n"
        
        text_widget.insert(tk.END, details)
        text_widget.configure(state=tk.DISABLED)

    def _compare_periods(self):
        """Compara gastos entre diferentes per√≠odos."""
        messagebox.showinfo(
            "Comparaci√≥n de Per√≠odos",
            "Funci√≥n de comparaci√≥n de per√≠odos en desarrollo.\n\n" +
            "Esta funci√≥n permitir√° comparar:\n" +
            "‚Ä¢ Gastos mes a mes\n" +
            "‚Ä¢ Tendencias anuales\n" +
            "‚Ä¢ Variaciones estacionales\n" +
            "‚Ä¢ An√°lisis de crecimiento"
        )

    def _forecast_expenses(self):
        """Genera proyecciones de gastos."""
        messagebox.showinfo(
            "Proyecci√≥n de Gastos",
            "Funci√≥n de proyecci√≥n en desarrollo.\n\n" +
            "Esta funci√≥n incluir√°:\n" +
            "‚Ä¢ Proyecci√≥n basada en tendencias\n" +
            "‚Ä¢ Estimados por categor√≠a\n" +
            "‚Ä¢ Presupuesto recomendado\n" +
            "‚Ä¢ Alertas de sobrecostos"
        )

    def _budget_analysis(self):
        """Realiza an√°lisis de presupuesto."""
        messagebox.showinfo(
            "An√°lisis de Presupuesto",
            "Funci√≥n de an√°lisis de presupuesto en desarrollo.\n\n" +
            "Esta funci√≥n permitir√°:\n" +
            "‚Ä¢ Definir presupuestos por categor√≠a\n" +
            "‚Ä¢ Comparar gasto real vs presupuesto\n" +
            "‚Ä¢ Alertas de sobregasto\n" +
            "‚Ä¢ Recomendaciones de optimizaci√≥n"
        )

    def _export_analysis(self):
        """Exporta el an√°lisis actual."""
        if not self.analysis_table.get_data():
            messagebox.showwarning("Advertencia", "No hay an√°lisis para exportar.")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            title="Exportar an√°lisis de gastos"
        )
        
        if filename:
            try:
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile)
                    
                    # Escribir encabezados
                    headers = ["Categor√≠a/Item", "Monto Total", "% del Total", "Cantidad", "Promedio", "Tendencia"]
                    writer.writerow(headers)
                    
                    # Escribir datos del an√°lisis
                    for row in self.analysis_table.get_data():
                        csv_row = [
                            row.get('category', ''),
                            row.get('total_amount', ''),
                            row.get('percentage', ''),
                            row.get('count', ''),
                            row.get('average', ''),
                            row.get('trend', '')
                        ]
                        writer.writerow(csv_row)
                
                messagebox.showinfo("√âxito", f"An√°lisis exportado correctamente a:\n{filename}")
                
            except Exception as e:
                messagebox.showerror("Error", f"Error al exportar an√°lisis: {e}")

    def _go_back_to_expenses_dashboard(self):
        """Vuelve al dashboard de gastos."""
        main_window = self.winfo_toplevel()
        if hasattr(main_window, '_show_view'):
            main_window._show_view('expenses_dashboard')

    def refresh(self):
        """Actualiza la vista."""
        self._load_data() 